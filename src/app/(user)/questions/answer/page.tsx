"use client";
import { IAnswer } from "@/interfaces/i-answer";
import { useSearchParams } from "next/navigation";
import { useRouter } from "next/navigation";
import { Suspense, useEffect, useState } from "react";
import { animate, motion } from "framer-motion";
import Logo from "@/components/logo";
import AnswerCard from "@/components/answer-card";
import Link from "next/link";

const mocked = {
  header:
    "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ‡∏î‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á‡∏ô‡∏∞? ‡∏ï‡∏±‡πâ‡∏á‡∏à‡∏¥‡∏ï‡∏≠‡∏ò‡∏¥‡∏©‡∏ê‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡∏ß‡πÅ‡∏ô‡πà ‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏û‡πà 3 ‡πÉ‡∏ö‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏∞",
  cards: [
    {
      name: "The Hermit",
      imageUrl: "the_hermit.png",
    },
    {
      name: "Eight Of Cups",
      imageUrl: "eight_of_cups.png",
    },
    {
      name: "Four of Cups",
      imageUrl: "four_of_cups.png",
    },
    {
      name: "Four of Cups",
      imageUrl: "four_of_cups.png",
    },
    {
      name: "Four of Cups",
      imageUrl: "four_of_cups.png",
    },
  ],
  reading:
    "‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏û‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏°‡∏≤‡∏ô‡∏µ‡πâ ‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏û‡∏ö‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å‡∏Ñ‡πà‡∏∞ ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ñ‡πà‡∏≥‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏¥‡πÄ‡∏®‡∏© ‡∏Å‡∏≤‡∏£‡∏û‡∏ö‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ô‡∏≥‡∏°‡∏≤‡∏ã‡∏∂‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏™‡∏°‡∏´‡∏ß‡∏±‡∏á ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏ï‡πá‡∏°‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ñ‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞",
  suggest:
    "‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ß‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏±‡∏á‡∏ß‡∏•‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏Ç‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞",
  final:
    "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏≤‡∏ô‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡∏ô‡πÅ‡∏ü‡πâ‡∏ô‡∏¢‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏Ñ‡πà‡∏∞",
  end: "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏°‡πà‡∏´‡∏°‡∏≠‡∏°‡∏µ‡∏°‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡∏ß‡∏á‡πÉ‡∏´‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞",
  notice: "‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏ç‡∏≤‡∏ì‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ô‡∏∞‡∏Ñ‡∏∞",
};

const textVariants = {
  hidden: { opacity: 0, y: 20 },
  visible: {
    opacity: 1,
    y: 0,
    transition: { duration: 0.4, ease: "easeInOut" },
  },
};

function AnswerSection() {
  const params = useSearchParams();
  const answer = params.get("ans");

  if (!answer) {
    return (
      <div className="relative h-screen w-full max-w-xl overflow-hidden">
        <section className="h-6/6 overflow-scroll flex items-center">
          <Link href="/questions" className="btn">
            ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
          </Link>
        </section>
      </div>
    );
  }

  const parsedAnswer: IAnswer | null = answer ? JSON.parse(answer) : null;
  // const parsedAnswer: IAnswer | null = mocked ? mocked : null;
  const [flipped, setFlipped] = useState(
    Array(parsedAnswer?.cards.length).fill(false)
  );

  console.log(flipped);
  const [reveal, setReveal] = useState<boolean>(false);

  useEffect(() => {
    if (flipped.every((value) => value === true)) {
      setReveal(true);
    }
  }, [flipped]);

  const handleFlip = (index: number) => {
    setFlipped((prev) => prev.map((f, i) => (i === index ? !f : f)));
  };

  return (
    <section className="h-4/6 pt-[h-1/6]flex items-center p-4 overflow-y-auto">
      {parsedAnswer == null ? (
        <div>Loading ... </div>
      ) : (
        <div className="grid grid-cols-1 gap-4">
          <h1 className="border-l-2 border-accent p-2">
            {parsedAnswer.header}
          </h1>
          <div className="w-full">
            <div className="text-xl font-bold">üé¥ ‡πÑ‡∏û‡πà‡∏ó‡∏µ‡πà‡∏´‡∏¢‡∏¥‡∏ö‡πÑ‡∏î‡πâ</div>
            <div className="my-4">
              {parsedAnswer.cards.length <= 3 ? (
                <div className="grid grid-cols-3 gap-2">
                  {parsedAnswer.cards.map((card, index) => (
                    <AnswerCard
                      key={index + 1}
                      name={card.name}
                      image={card.imageUrl}
                      flipped={flipped[index]}
                      onClick={() => handleFlip(index)}
                    />
                  ))}
                </div>
              ) : (
                <div className="my-4">
                  <div className="grid grid-cols-3 gap-2">
                    {parsedAnswer.cards.slice(0, 3).map((card, index) => (
                      <AnswerCard
                        key={index + 1}
                        name={card.name}
                        image={card.imageUrl}
                        flipped={flipped[index]}
                        onClick={() => handleFlip(index)}
                      />
                    ))}
                  </div>
                  <div className="grid grid-cols-3 gap-2 mt-4">
                    {parsedAnswer.cards.slice(3, 5).map((card, index) => (
                      <AnswerCard
                        key={index + 1}
                        name={card.name}
                        image={card.imageUrl}
                        flipped={flipped[index + 3]}
                        onClick={() => handleFlip(index + 3)}
                      />
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>

          {reveal ? (
            <motion.div
              className="grid grid-cols-1 gap-4"
              initial="hidden"
              animate="visible"
              variants={{
                hidden: { opacity: 0, y: 20 },
                visible: {
                  opacity: 1,
                  y: 0,
                  transition: { staggerChildren: 0.2 },
                },
              }}
            >
              <motion.h1 className="text-xl font-bold" variants={textVariants}>
                ü™Ñ ‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
              </motion.h1>
              <motion.p variants={textVariants}>
                {parsedAnswer?.reading}
              </motion.p>
              <motion.h1 className="text-xl font-bold" variants={textVariants}>
                ü§ü ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
              </motion.h1>
              <motion.p variants={textVariants}>
                {parsedAnswer?.suggest}
              </motion.p>
              <motion.h1 className="text-xl font-bold" variants={textVariants}>
                üíö ‡∏™‡∏£‡∏∏‡∏õ
              </motion.h1>
              <motion.p variants={textVariants}>{parsedAnswer?.final}</motion.p>

              <motion.div variants={textVariants}>
                {parsedAnswer.end} üôèüôè
              </motion.div>
              <motion.div
                className="font-semibold text-accent"
                variants={textVariants}
              >
                {parsedAnswer.notice}
              </motion.div>
            </motion.div>
          ) : null}
        </div>
      )}
    </section>
  );
}

export default function AnswerPage() {
  const { back } = useRouter();

  return (
    <>
      <Suspense
        fallback={
          <div className="mt-10 flex flex-col items-center gap-2 flex-1">
            <Logo />
            <div>‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà üòä</div>
          </div>
        }
      >
        <AnswerSection />
      </Suspense>
      <section className="h-1/6 flex w-full justify-center items-center">
        <button onClick={back} className="btn">
          üëà ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≠
        </button>
      </section>
    </>
  );
}
